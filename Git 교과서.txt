

숨겨진 폴더까지 같이 복사하는 명령어
: $ cp -r 원본폴더 복사폴더


작업하는 공간: working
임시 저장 공간: stage
실제 저장 공간: repository

untracked 상태: 워킹 디렉토리에 '새로 생성된 파일'은 모두 '추적되지 않음' 상태이다.
tracked 상태: 'git add 파일 이름' 명령어를 통해 untracked 상태의 파일을 '추적' 상태로 변경.

stage = 임시 영역 : 워킹 디렉터리에서 작업이 끝난 파일을 스테이지로 복사. 커밋 하려는 파일들의 추적 상태 정보들만 기록.
<파일들의 스테이지 상태 확인>
: git status
: git ls-files -- stage

<modified 상태>
파일이 수정되면 modified 상태로 변경되고, 수정된 파일은 스테이지에서 제외된다. git add 명령어를 통해 스테이지 영역에 다시 적용 가능하다.

<unmodified 상태>
tracked 상태이면서 스테이지에 한번도 수정하지 않은 원본 상태 의미.

<status 명령어> : 깃의 상태 메시지를 확인
$ git status ---- 상태 확인
On branch master
No commits yet ---- 커밋이 없다는 메시지
nothing to commit (create/copy files and use "git add" to track) ---- 변경된 내용이 없다는 메시지

파일 관리 목록에서 제외(.gitignore) : 깃에서 관리하지 않는 파일들의 목록을 갖고 있다.
.gitignore파일은 덱스트 에디터를 이용해 간단하게 작성 가능. 저장소의 최상위 티렉터리에 두어야함. 
<.gitignore 파일 표기법>
#: 주석처리.
*: 모든 문자열을 대체.(셸 글로빙(globbing))
!: 제외하지 않을 파일.

ex)
 # DB 접속 파일을 제외함
 dbinfo.php

 # 오브젝트 파일은 제외함
 *.obj

 # 환경 설정 파일은 제외하면 안 됨
 !config.php

<깃에서 디렉터리 표현. 깃은 glob 패턴을 지원하므로, 정규 표현식을 응용해 규칙 작성 가능.>
 # 현재 디렉터리 안에 있는 파일 무시
 /readme.txt

 # /pub/ 디렉터리 안의 모든 것을 무시
 /pub/

 # doc 디렉터리 아래의 모든 .txt 파일 무시
 doc/**/*.txt


깃 저장소 복제
: $ git clone 원격저장소URL 새폴더이름

파일 등록 취소: tracked 상태의 파일 -> untracked 상태로 변경. 삭제(rm)나 리셋(reset) 명령어 사용.
: $ git rm --cached 파일 이름	--- 스테이지의 캐시 목록에서 파일 삭제됨.

* 파일 커밋하지 않고 바로 삭제 : 'rm --cached'명령어
* 한번이라도 커밋 한경우 'reset' 명령어 사용. : 파일이 사제 또는 변화된 것으로 간주.

파일 이름 변경
: $ git mv 파일이름 새파일이름
    => git rm 파일이름 -> git add 새파일이름

<처음 커밋>
커밋(commit) : 의미 있는 변경 작업들을 저장소에 기록하는 동작. : $ git commit
HEAD: 커밋을 가리키는 묵시적 참조 포인터. 즉 최종적인 커밋 작업의 위치 가리킴. 처음 커밋할때는 없음.
스냅샷: HEAD가 가리키는 커밋을 기반으로 사진을 찍고 스테이지 영역과 비교해 새로운 커밋으로 기록.

# 커밋내용으로는 첫째줄에 제목, 다음줄에 상세 내용 작성.

파일 등록과 커밋 동시에: $ git commit -a
커멧과 메시지 작성 동시에: $ git commit -m 메시지

커밋 로그 확인 : $ git log


<두번째 커밋>
#수정한 파일을 커밋 전 마지막 내용으로 되돌리기: $ git checkout -- 수정파일이름#
파일 등록(git add) -> 커밋(git commit)

-am 옵션: 파일 등록과 한 줄짜리 커밋 메시지를 동시에 처리.
  # -am 명령어 사용하기 위해서는 add 명령어 먼저 수행
$ git commit -am "커밋메시지"

커밋 로그 확인 : $ git log


<메시지가 없는 빈 커밋>
커밋은 반드시 커밋 메시지를 같이 작성해야함. 메시지가 없는 커밋 = '빈 커밋'


<세 번째 커밋>
'--allow-empty-message' 옵션 사용
: $ git commit --allow-empty-message -m ""   <- 커밋 메시지를 작성하지 않음.

# 직전 커밋 메시지 수정 : --amend
: git commit --amend






